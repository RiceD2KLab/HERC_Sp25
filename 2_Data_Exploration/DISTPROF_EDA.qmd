---
title: "DISTPROF Exploratory Data Analysis"
format: html
toc: true
toc-depth: 3
---

# Data Wrangling

```{r}
library(ggplot2)
library(tidyverse)
```

## Loading in the data

```{r, message=FALSE, warning=FALSE}
setwd("/Users/biancaschutz/HERC_Sp25")

load_distprof_data <- function(years) {
  distprof_dataframes <- list()
  for (i in 1:length(years)) {
    year <- years[[i]]
    path <- paste0("0_Datasets_csv/Data", year, "/District/clean_data/distprof_", year, "_clean.csv")
    df <- read.csv(path)
    distprof_dataframes[[i]] <- data.frame(df)
    names(distprof_dataframes)[[i]] <- paste0("distprof", year)
    cat("Loaded in DISTPROF for", year, "\n")
  }
  return(distprof_dataframes)
}

distprof_list <- load_distprof_data(2020:2023)
```

## Remove Columns with Too Many NAs

```{r}
calculate_missing_percentage <- function(df) {
  na_counts <- lapply(df, function(x) sum(is.na(x))/nrow(df))
  return(na_counts)
}

drop_columns <- function(df, threshold = .5) {
  percents <- calculate_missing_percentage(df)
  column_ref <- names(percents)
  percent_ref <- unname(unlist(percents))

  drop_cols <- data.frame(column = column_ref, percent_na = percent_ref) %>%
    filter(percent_na >= threshold) %>% pull(column)
  
  new_df <- df %>% select(-all_of(drop_cols))
  
  return(new_df)
}

# drop_columns(distprof_list[[1]])
```

```{r}
distprof_drop_cols <- lapply(distprof_list, drop_columns)
```

## Extract Relevant Columns

For DISTPROF, we are interested in the following data: \* African American Student Percent \* American Indian Student Percent \* Asian American Student Percent \* Hispanic Student Percent \* Pacific Islander Student Percent \* Two or More Races Student Percent \* White Student Percent \* Economically Disadvantaged Student Percent \* Special Education Student Percent \* Gifted & Talented Student Percent \* Immigrant Student Percent \* Bilingual & ESL Student Percent \* Teacher to Student Ratio \* All Students Count/number of students in district/enrollment

```{r}
distprof_selected <- list()
years <- 2020:2023
for (i in 1:length(years)) {
  distprof_yr <- distprof_drop_cols[[i]]
  
  year <- years[[i]]
  
  column_names <- c(paste0("District.", year, ".Student.Membership..", c("White.Percent", "African.American.Percent", "Hispanic.Percent", "American.Indian.Percent", "Asian.Percent", "Pacific.Islander.Percent", "Two.or.More.Races.Percent", "Econ.Disadv.Percent", "Bilingual.ESL.Percent", "Gifted...Talented.Percent", "Immigrant.Percent", "Special.Ed.Percent", "All.Students.Count")), paste0("District.", year, ".Staff..Teacher.Student.Ratio"), "DISTRICT", "DISTNAME")
  
  distprof_selected[[i]] <- distprof_yr[,column_names]
  names(distprof_selected)[[i]] <- paste0("distprof", year)
}
```

## Rbind dataframes

```{r}
# new column names
for (i in 1:length(distprof_selected)) {
  column_names_no_year <- gsub("_+", "_", gsub("\\.{2}", "_",  
                             gsub("\\.", "_", 
                                  gsub("District\\.\\d{4}\\.", "",
                                       colnames(distprof_selected[[i]])))))

  colnames(distprof_selected[[i]]) <- column_names_no_year
  
  distprof_selected[[i]]$Year <- years[[i]]
}
```

```{r}
distprof <- do.call(rbind, distprof_selected)
rownames(distprof) <- NULL
```

## Join with district_type

```{r}
setwd("/Users/biancaschutz/HERC_Sp25")

load_dtype_data <- function(years) {
  dtype_dataframes <- list()
  for (i in 1:length(years)) {
    year <- years[[i]]
    path <- paste0("0_Datasets_csv/Data", year, "/District/clean_data/district_type", year, "_clean.csv")
    df <- read.csv(path)
    df$Year <- year
    dtype_dataframes[[i]] <- data.frame(df)
    names(dtype_dataframes)[[i]] <- paste0("dist_type", year)
    cat("Loaded in District Type for", year, "\n")
  }
  return(dtype_dataframes)
}

dtype_list <- load_dtype_data(2020:2023)

district_type <- do.call(rbind, dtype_list)
rownames(district_type) <- NULL

# make sure there's no NAs
sum(is.na(distprof$DISTRICT))
distprof$DISTRICT <- as.integer(gsub("[^[:alnum:]_]", "", distprof$DISTRICT))
sum(is.na(distprof$DISTRICT))

# Now join the two

distprof_joined <- distprof %>% left_join(district_type, by = c("DISTNAME" = "District", "DISTRICT" = "District.Number", "Year"))
```

# Barplots

## Function to create bar plot of the top N school districts on a particular demographic.

Inputs are as follows:

-   year = an integer formatted as YYYY representing a year from 2020-2023

-   top_n = an integer representing the number of top school districts to show. Default value is 10.

-   include_charter = a Boolean value indicating whether or not to include charter schools in the plot (FALSE is do not include charters, TRUE includes them). Default value is FALSE.

-   demographic = a string of the following values:

    -   "Student_Membership_White_Percent"

    -   "Student_Membership_African_American_Percent"

    -   "Student_Membership_Hispanic_Percent"

    -   "Student_Membership_American_Indian_Percent"

    -   "Student_Membership_Asian_Percent"

    -   "Student_Membership_Pacific_Islander_Percent"

    -   "Student_Membership_Two_or_More_Races_Percent"

    -   "Student_Membership_Econ_Disadv_Percent"

    -   "Student_Membership_Bilingual_ESL_Percent"

    -   "Student_Membership_Gifted_Talented_Percent"

    -   "Student_Membership_Immigrant_Percent"

    -   "Student_Membership_Special_Ed_Percent"

    -   "Student_Membership_All_Students_Count"

    -   "Staff_Teacher_Student_Ratio"

```{r, eval=FALSE}
# Bar Plot Generator Function
generate_demographic_barplot <- function(year, top_n = 10, include_charter = FALSE, demographic) {
  demographic_key <- list(
  "Student_Membership_White_Percent" = "White Student Percent",
  "Student_Membership_African_American_Percent" = "Black Student Percent",
  "Student_Membership_Hispanic_Percent" = "Hispanic Student Percent",
  "Student_Membership_American_Indian_Percent" = "American Indian Student Percent",
  "Student_Membership_Asian_Percent" = "Asian Student Percent",
  "Student_Membership_Pacific_Islander_Percent" = "Pacific Islander Student Percent",
  "Student_Membership_Two_or_More_Races_Percent" = "Multiracial Student Percent",
  "Student_Membership_Econ_Disadv_Percent" = "Economically Disadvantaged Student Percent",
  "Student_Membership_Bilingual_ESL_Percent" = "Bilingual/ESL Student Percent",
  "Student_Membership_Gifted_Talented_Percent" = "Gifted & Talented Student Percent",
  "Student_Membership_Immigrant_Percent" = "Immigrant Student Percent",
  "Student_Membership_Special_Ed_Percent" = "Special Education Student Percent",
  "Student_Membership_All_Students_Count" = "Total Student Enrollment",
  "Staff_Teacher_Student_Ratio" = "Teacher-Student Ratio"
)
  
  if (include_charter == FALSE) {
    year_distprof <- distprof_joined %>% filter(Year == year & 
                                                  Charter.School..Y.N. != "Y")
  }
  else if (include_charter == TRUE) {
    year_distprof <- distprof_joined %>% filter(Year == year)
  }
  else stop("Invalid input for charter school inclusion")
  
  topN_demographic <- year_distprof %>%
    arrange(desc(.data[[demographic]])) %>%
    slice_head(n = top_n) %>% select(all_of(c("DISTNAME", demographic)))
  
  barplot <- ggplot(topN_demographic, aes(x = reorder(DISTNAME, desc(.data[[demographic]])), y = .data[[demographic]])) +
  geom_col(fill = 'green4') +
  scale_x_discrete(labels = scales::label_wrap(18)) +
  theme(legend.position = 'none') +
  labs(title = paste0("10 Highest ", demographic_key[[demographic]], " in Texas School Districts, ", year),
       x = "District Name",
       y = demographic_key[[demographic]]) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
  return(barplot)
}
```

## African American Student Percent

Takeaway: the schools with the largest percentage of Black students are college preparatory schools or academies.

```{r}
generate_demographic_barplot(2023, include_charter = TRUE, demographic = "Student_Membership_African_American_Percent")
```

Compare this to without the charter schools, the percentages drop by almost 20%.

```{r}
generate_demographic_barplot(2023, demographic = "Student_Membership_African_American_Percent")
```
This is likely due to the population sizes where these percentages are drawn from.

```{r}
lancaster_isd_count <- distprof %>% 
  filter(Year == 2023 & DISTNAME == "LANCASTER ISD") %>%
  pull(Student_Membership_All_Students_Count)

beatrice_mayes_count <- distprof %>% 
  filter(Year == 2023 & DISTNAME == "BEATRICE MAYES INSTITUTE CHARTER SCHOOL") %>% 
  pull(Student_Membership_All_Students_Count)

cat("Lancaster ISD Total Student Count:", lancaster_isd_count[[1]], "\n",
    "Beatrice Mayes Total Student Count:", beatrice_mayes_count[[1]])
```

Ultimately, this gives us reason to separate charter schools out from school districts, as their percentages may not be comparable with public school districts. Or, at least, create a separate filter for charters. 

# Histograms

## Function to create histogram of demographic distribution

Inputs are as follows:

-   year = an integer formatted as YYYY representing a year from 2020-2023

-   include_charter = a Boolean value indicating whether or not to include charter schools in the plot (FALSE is do not include charters, TRUE includes them). Default value is FALSE.

-   demographic = a string of the following values:

    -   "Student_Membership_White_Percent"

    -   "Student_Membership_African_American_Percent"

    -   "Student_Membership_Hispanic_Percent"

    -   "Student_Membership_American_Indian_Percent"

    -   "Student_Membership_Asian_Percent"

    -   "Student_Membership_Pacific_Islander_Percent"

    -   "Student_Membership_Two_or_More_Races_Percent"

    -   "Student_Membership_Econ_Disadv_Percent"

    -   "Student_Membership_Bilingual_ESL_Percent"

    -   "Student_Membership_Gifted_Talented_Percent"

    -   "Student_Membership_Immigrant_Percent"

    -   "Student_Membership_Special_Ed_Percent"

    -   "Student_Membership_All_Students_Count"

    -   "Staff_Teacher_Student_Ratio"

```{r}
generate_demographic_hist <- function(year, include_charter = FALSE, demographic) {
  demographic_key <- list(
  "Student_Membership_White_Percent" = "White Student Percent",
  "Student_Membership_African_American_Percent" = "Black Student Percent",
  "Student_Membership_Hispanic_Percent" = "Hispanic Student Percent",
  "Student_Membership_American_Indian_Percent" = "American Indian Student Percent",
  "Student_Membership_Asian_Percent" = "Asian Student Percent",
  "Student_Membership_Pacific_Islander_Percent" = "Pacific Islander Student Percent",
  "Student_Membership_Two_or_More_Races_Percent" = "Multiracial Student Percent",
  "Student_Membership_Econ_Disadv_Percent" = "Economically Disadvantaged Student Percent",
  "Student_Membership_Bilingual_ESL_Percent" = "Bilingual/ESL Student Percent",
  "Student_Membership_Gifted_Talented_Percent" = "Gifted & Talented Student Percent",
  "Student_Membership_Immigrant_Percent" = "Immigrant Student Percent",
  "Student_Membership_Special_Ed_Percent" = "Special Education Student Percent",
  "Student_Membership_All_Students_Count" = "Total Student Enrollment",
  "Staff_Teacher_Student_Ratio" = "Teacher-Student Ratio"
)
  
  if (include_charter == FALSE) {
    year_distprof <- distprof_joined %>% filter(Year == year & 
                                                  Charter.School..Y.N. != "Y")
  }
  else if (include_charter == TRUE) {
    year_distprof <- distprof_joined %>% filter(Year == year)
  }
  else stop("Invalid input for charter school inclusion")
  
  demographic_data <- year_distprof %>% select(all_of(c("DISTNAME", demographic)))
  
hist <- ggplot(demographic_data, aes(x = .data[[demographic]])) +
  geom_histogram(fill = 'green4', binwidth = 5) +
  scale_x_continuous(labels = scales::label_wrap(18)) +  # Ensure x is continuous
  labs(title = paste0("Distribution of ", demographic_key[[demographic]], " in Texas School Districts, ", year),
       x = demographic_key[[demographic]],
       y = "Count") +  # Histogram y-axis represents count
  theme(
    legend.position = 'none',
    axis.text.x = element_text(angle = 45, hjust = 1)
  )
  return(hist)
}
```

## African American Percent Distribution

```{r}
generate_demographic_hist(2023, demographic = "Student_Membership_African_American_Percent")
```