# -*- coding: utf-8 -*-
"""DREF_Viz.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/108LbbsrahbWffDU6g92Jjvky04SVty29
"""

!pip install geopandas folium mapclassify openpyxl

import pandas as pd
import geopandas as gpd
import folium
from folium.plugins import HeatMap

import folium
import geopandas as gpd
import pandas as pd

# Load Texas county boundaries
texas_counties = gpd.read_file("https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_county_20m.zip")
texas_counties = texas_counties[texas_counties['STATEFP'] == '48']  # Filter only Texas (FIPS 48)
texas_counties = texas_counties[['NAME', 'geometry']]  # Keep necessary columns
texas_counties.columns = ['County', 'geometry']

# Ensure county names match the dataset format (uppercase)
texas_counties['County'] = texas_counties['County'].str.upper()

# Load dataset and count 'Y' values per county
file_path = "/content/dref_2023_clean.xlsx"
df = pd.read_excel(file_path, engine="openpyxl")
df_filtered = df[df['DFLCHART'] == 'Y']
county_counts = df_filtered['CNTYNAME'].value_counts().reset_index()
county_counts.columns = ['County', 'Count']
county_counts['County'] = county_counts['County'].str.upper()

# Merge dataset with Texas counties (ensuring all counties are included)
texas_map = texas_counties.merge(county_counts, on='County', how='left')
texas_map['Count'] = texas_map['Count'].fillna(0)  # Fill missing values with 0

# Convert GeoDataFrame to JSON for Folium
texas_map_json = texas_map.to_json()

# Create a folium map centered in Texas
m = folium.Map(location=[31, -99], zoom_start=6)

# Create choropleth map
folium.Choropleth(
    geo_data=texas_map_json,
    name="DFLCHART Heatmap",
    data=texas_map,
    columns=["County", "Count"],
    key_on="feature.properties.County",
    fill_color="YlOrRd",
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name="Number of Charters in Each County"
).add_to(m)

# Add county name labels (full names, no abbreviations)
for _, row in texas_map.iterrows():
    folium.Marker(
        location=[row.geometry.centroid.y, row.geometry.centroid.x],
        popup=f"{row['County']}: {int(row['Count'])}",  # Show full county name
        icon=folium.DivIcon(html=f"<div style='font-size:5pt; color:black; font-weight:bold;'>{row['County']}</div>")
    ).add_to(m)

# Display map
m

import folium
import geopandas as gpd
import pandas as pd

# Load Texas county boundaries
texas_counties = gpd.read_file("https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_county_20m.zip")
texas_counties = texas_counties[texas_counties['STATEFP'] == '48']  # Filter only Texas (FIPS 48)
texas_counties = texas_counties[['NAME', 'geometry']]  # Keep necessary columns
texas_counties.columns = ['County', 'geometry']

# Ensure county names match the dataset format (uppercase)
texas_counties['County'] = texas_counties['County'].str.upper()

# Load dataset and count 'Y' values per county
file_path = "/content/dref_2022_clean.xlsx"
df = pd.read_excel(file_path, engine="openpyxl")
df_filtered = df[df['DFLCHART'] == 'Y']
county_counts = df_filtered['CNTYNAME'].value_counts().reset_index()
county_counts.columns = ['County', 'Count']
county_counts['County'] = county_counts['County'].str.upper()

# Merge dataset with Texas counties (ensuring all counties are included)
texas_map = texas_counties.merge(county_counts, on='County', how='left')
texas_map['Count'] = texas_map['Count'].fillna(0)  # Fill missing values with 0

# Convert GeoDataFrame to JSON for Folium
texas_map_json = texas_map.to_json()

# Create a folium map centered in Texas
m = folium.Map(location=[31, -99], zoom_start=6)

# Create choropleth map
folium.Choropleth(
    geo_data=texas_map_json,
    name="DFLCHART Heatmap",
    data=texas_map,
    columns=["County", "Count"],
    key_on="feature.properties.County",
    fill_color="YlOrRd",
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name="Number of Charters in Each County"
).add_to(m)

# Add county name labels (full names, no abbreviations)
for _, row in texas_map.iterrows():
    folium.Marker(
        location=[row.geometry.centroid.y, row.geometry.centroid.x],
        popup=f"{row['County']}: {int(row['Count'])}",  # Show full county name
        icon=folium.DivIcon(html=f"<div style='font-size:4pt; color:black; font-weight:bold;'>{row['County']}</div>")
    ).add_to(m)

# Display map
m

import folium
import geopandas as gpd
import pandas as pd

# Load Texas county boundaries
texas_counties = gpd.read_file("https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_county_20m.zip")
texas_counties = texas_counties[texas_counties['STATEFP'] == '48']  # Filter only Texas (FIPS 48)
texas_counties = texas_counties[['NAME', 'geometry']]  # Keep necessary columns
texas_counties.columns = ['County', 'geometry']

# Ensure county names match the dataset format (uppercase)
texas_counties['County'] = texas_counties['County'].str.upper()

# Load dataset and count 'Y' values per county
file_path = "dref_2021_clean.xlsx"
df = pd.read_excel(file_path, engine="openpyxl")
df_filtered = df[df['DFLCHART'] == 'Y']
county_counts = df_filtered['CNTYNAME'].value_counts().reset_index()
county_counts.columns = ['County', 'Count']
county_counts['County'] = county_counts['County'].str.upper()

# Merge dataset with Texas counties (ensuring all counties are included)
texas_map = texas_counties.merge(county_counts, on='County', how='left')
texas_map['Count'] = texas_map['Count'].fillna(0)  # Fill missing values with 0

# Convert GeoDataFrame to JSON for Folium
texas_map_json = texas_map.to_json()

# Create a folium map centered in Texas
m = folium.Map(location=[31, -99], zoom_start=6)

# Create choropleth map
folium.Choropleth(
    geo_data=texas_map_json,
    name="DFLCHART Heatmap",
    data=texas_map,
    columns=["County", "Count"],
    key_on="feature.properties.County",
    fill_color="YlOrRd",
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name="Number of Charters in Each County"
).add_to(m)

# Add county name labels (full names, no abbreviations)
for _, row in texas_map.iterrows():
    folium.Marker(
        location=[row.geometry.centroid.y, row.geometry.centroid.x],
        popup=f"{row['County']}: {int(row['Count'])}",  # Show full county name
        icon=folium.DivIcon(html=f"<div style='font-size:4pt; color:black; font-weight:bold;'>{row['County']}</div>")
    ).add_to(m)

# Display map
m

import folium
import geopandas as gpd
import pandas as pd

# Load Texas county boundaries
texas_counties = gpd.read_file("https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_county_20m.zip")
texas_counties = texas_counties[texas_counties['STATEFP'] == '48']  # Filter only Texas (FIPS 48)
texas_counties = texas_counties[['NAME', 'geometry']]  # Keep necessary columns
texas_counties.columns = ['County', 'geometry']

# Ensure county names match the dataset format (uppercase)
texas_counties['County'] = texas_counties['County'].str.upper()

# Load dataset and count 'Y' values per county
file_path = "/content/dref_2020_clean.xlsx"
df = pd.read_excel(file_path, engine="openpyxl")
df_filtered = df[df['DFLCHART'] == 'Y']
county_counts = df_filtered['CNTYNAME'].value_counts().reset_index()
county_counts.columns = ['County', 'Count']
county_counts['County'] = county_counts['County'].str.upper()

# Merge dataset with Texas counties (ensuring all counties are included)
texas_map = texas_counties.merge(county_counts, on='County', how='left')
texas_map['Count'] = texas_map['Count'].fillna(0)  # Fill missing values with 0

# Convert GeoDataFrame to JSON for Folium
texas_map_json = texas_map.to_json()

# Create a folium map centered in Texas
m = folium.Map(location=[31, -99], zoom_start=6)

# Create choropleth map
folium.Choropleth(
    geo_data=texas_map_json,
    name="DFLCHART Heatmap",
    data=texas_map,
    columns=["County", "Count"],
    key_on="feature.properties.County",
    fill_color="YlOrRd",
    fill_opacity=0.7,
    line_opacity=0.2,
    legend_name="Number of Charters in Each County"
).add_to(m)

# Add county name labels (full names, no abbreviations)
for _, row in texas_map.iterrows():
    folium.Marker(
        location=[row.geometry.centroid.y, row.geometry.centroid.x],
        popup=f"{row['County']}: {int(row['Count'])}",  # Show full county name
        icon=folium.DivIcon(html=f"<div style='font-size:5pt; color:black; font-weight:bold;'>{row['County']}</div>")
    ).add_to(m)

# Display map
m

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import geopandas as gpd

# Load dataset
file_path = "/content/dref_2023_clean.xlsx"
df = pd.read_excel(file_path, engine="openpyxl")

# Filter for 'Y' values in DFLCHART
df_filtered = df[df['DFLCHART'] == 'Y']

# Count occurrences of 'Y' for each county
county_counts = df_filtered['CNTYNAME'].value_counts().reset_index()
county_counts.columns = ['County', 'Count']

# Subset only counties with at least 1 charter
county_counts = county_counts[county_counts['Count'] > 0].sort_values(by="Count", ascending=False)

# Plot bar chart
plt.figure(figsize=(12, 8))
sns.barplot(data=county_counts, x="Count", y="County", palette="Reds_r")

# Labels and title
plt.xlabel("Number of Charters (DFLCHART = 'Y')")
plt.ylabel("County")
plt.title("Number of Charters Per County in Texas")
plt.grid(axis="x", linestyle="--", alpha=0.7)

# Show the plot
plt.show()

df

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
file_path = "/content/dref_2023_clean.xlsx"
df = pd.read_excel(file_path, engine="openpyxl")

# Filter for 'Y' values in DFLCHART
df_filtered = df[df['DFLCHART'] == 'Y']

# Count occurrences of 'Y' for each county (charter count)
charter_counts = df_filtered['CNTYNAME'].value_counts().reset_index()
charter_counts.columns = ['County', 'Charter_Count']

# Count number of districts in each county
district_counts = df.groupby('CNTYNAME')['DISTNAME'].nunique().reset_index()
district_counts.columns = ['County', 'District_Count']

# Merge the two datasets
county_counts = pd.merge(charter_counts, district_counts, on='County', how='inner')

# Sort by Charter Count (descending order)
county_counts = county_counts.sort_values(by="Charter_Count", ascending=False)

# Plot grouped bar chart
plt.figure(figsize=(12, 8))
bar_width = 0.4
counties = county_counts['County']

# Position bars
x_indexes = range(len(counties))

plt.barh(x_indexes, county_counts['Charter_Count'], color='red', height=bar_width, label="Charters")
plt.barh([x + bar_width for x in x_indexes], county_counts['District_Count'], color='blue', height=bar_width, label="Districts")

# Labels and title
plt.yticks(ticks=[x + bar_width/2 for x in x_indexes], labels=counties)  # Adjust y-axis labels to center
plt.xlabel("Count")
plt.ylabel("County")
plt.title("Number of Charters and Districts Per County in Texas (Sorted by Charters)")
plt.legend()
plt.grid(axis="x", linestyle="--", alpha=0.7)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
file_path = "/content/dref_2022_clean.xlsx"
df = pd.read_excel(file_path, engine="openpyxl")

# Filter for 'Y' values in DFLCHART
df_filtered = df[df['DFLCHART'] == 'Y']

# Count occurrences of 'Y' for each county (charter count)
charter_counts = df_filtered['CNTYNAME'].value_counts().reset_index()
charter_counts.columns = ['County', 'Charter_Count']

# Count number of districts in each county
district_counts = df.groupby('CNTYNAME')['DISTNAME'].nunique().reset_index()
district_counts.columns = ['County', 'District_Count']

# Merge the two datasets
county_counts = pd.merge(charter_counts, district_counts, on='County', how='inner')

# Sort by Charter Count (descending order)
county_counts = county_counts.sort_values(by="Charter_Count", ascending=False)

# Plot grouped bar chart
plt.figure(figsize=(12, 8))
bar_width = 0.4
counties = county_counts['County']

# Position bars
x_indexes = range(len(counties))

plt.barh(x_indexes, county_counts['Charter_Count'], color='red', height=bar_width, label="Charters")
plt.barh([x + bar_width for x in x_indexes], county_counts['District_Count'], color='blue', height=bar_width, label="Districts")

# Labels and title
plt.yticks(ticks=[x + bar_width/2 for x in x_indexes], labels=counties)  # Adjust y-axis labels to center
plt.xlabel("Count")
plt.ylabel("County")
plt.title("Number of Charters and Districts Per County in Texas (Sorted by Charters)")
plt.legend()
plt.grid(axis="x", linestyle="--", alpha=0.7)

# Show the plot
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
file_path = "/content/dref_2021_clean.xlsx"
df = pd.read_excel(file_path, engine="openpyxl")

# Filter for 'Y' values in DFLCHART
df_filtered = df[df['DFLCHART'] == 'Y']

# Count occurrences of 'Y' for each county (charter count)
charter_counts = df_filtered['CNTYNAME'].value_counts().reset_index()
charter_counts.columns = ['County', 'Charter_Count']

# Count number of districts in each county
district_counts = df.groupby('CNTYNAME')['DISTNAME'].nunique().reset_index()
district_counts.columns = ['County', 'District_Count']

# Merge the two datasets
county_counts = pd.merge(charter_counts, district_counts, on='County', how='inner')

# Sort by Charter Count (descending order)
county_counts = county_counts.sort_values(by="Charter_Count", ascending=False)

# Plot grouped bar chart
plt.figure(figsize=(12, 8))
bar_width = 0.4
counties = county_counts['County']

# Position bars
x_indexes = range(len(counties))

plt.barh(x_indexes, county_counts['Charter_Count'], color='red', height=bar_width, label="Charters")
plt.barh([x + bar_width for x in x_indexes], county_counts['District_Count'], color='blue', height=bar_width, label="Districts")

# Labels and title
plt.yticks(ticks=[x + bar_width/2 for x in x_indexes], labels=counties)  # Adjust y-axis labels to center
plt.xlabel("Count")
plt.ylabel("County")
plt.title("Number of Charters and Districts Per County in Texas (Sorted by Charters)")
plt.legend()
plt.grid(axis="x", linestyle="--", alpha=0.7)

# Show the plot
plt.show()